commit 452fee20da72d0939f3f441894fa80a0e69cc267
Author: Hubert Figui√®re <hub@figuiere.net>
Date:   Tue Apr 20 22:56:57 2021 -0400

    LV2: remove dependency on sigc and glibmm

diff --git a/src/LV2/gxtuner.lv2/gx_pitch_tracker.h b/src/LV2/gxtuner.lv2/gx_pitch_tracker.h
index 54333290..8e07d085 100644
--- a/src/LV2/gxtuner.lv2/gx_pitch_tracker.h
+++ b/src/LV2/gxtuner.lv2/gx_pitch_tracker.h
@@ -24,9 +24,11 @@
 
 #ifndef SRC_HEADERS_GX_PITCH_TRACKER_H_
 #define SRC_HEADERS_GX_PITCH_TRACKER_H_
+#undef max
+#undef min
+#include <boost/signals2/signal.hpp>
 #include <fftw3.h>
 #include <semaphore.h>
-#include <sigc++/sigc++.h>
 
 /* ------------- Pitch Tracker ------------- */
 
@@ -43,7 +45,7 @@ class PitchTracker {
     void            set_threshold(float v);
     void            set_fast_note_detection(bool v);
    // Glib::Dispatcher new_freq;
-    sigc::signal<void > new_freq;
+    boost::signals2::signal<void ()> new_freq;
  private:
     bool            setParameters(int priority, int policy, int sampleRate, int fftSize );
     void            run();
diff --git a/src/LV2/gxtuner.lv2/gx_vumeter.cc b/src/LV2/gxtuner.lv2/gx_vumeter.cc
index edcc72ae..d8d79028 100644
--- a/src/LV2/gxtuner.lv2/gx_vumeter.cc
+++ b/src/LV2/gxtuner.lv2/gx_vumeter.cc
@@ -85,10 +85,10 @@ void MaxLevel::process(int count, float *input1, float*, PluginLV2 *plugin) {
     const float *data = input1;
         float level = 0;
         for (int i = 0; i < count; i++) {
-            level = max(fabs(data[i]),level);
+            level = std::max(fabsf(data[i]),level);
         }
         self.midilevel = level;
-        *(self.maxlevel_) = self.maxlevel = max(self.maxlevel, level);
+        *(self.maxlevel_) = self.maxlevel = std::max(self.maxlevel, level);
 }
 
 PluginLV2 *vu_plugin() {
diff --git a/src/LV2/gxtuner.lv2/gxtuner.cpp b/src/LV2/gxtuner.lv2/gxtuner.cpp
index f412cd12..24280e89 100644
--- a/src/LV2/gxtuner.lv2/gxtuner.cpp
+++ b/src/LV2/gxtuner.lv2/gxtuner.cpp
@@ -301,7 +301,9 @@ void Gxtuner::init_dsp_mono(uint32_t rate)
   lhcut->set_samplerate(rate, lhcut);
   bow->set_samplerate(rate, bow);
   tuner& self = *static_cast<tuner*>(tuner_adapter);
-  self.signal_freq_changed().connect(sigc::mem_fun(this, &Gxtuner::freq_changed_handler));
+  self.signal_freq_changed().connect([this]() {
+    this->freq_changed_handler();
+  });
 }
 
 // connect the Ports used by the plug-in class
diff --git a/src/LV2/gxtuner.lv2/tuner.cc b/src/LV2/gxtuner.lv2/tuner.cc
index 7a68a038..d3961a4d 100644
--- a/src/LV2/gxtuner.lv2/tuner.cc
+++ b/src/LV2/gxtuner.lv2/tuner.cc
@@ -26,6 +26,9 @@
  */
 
 #include "gx_pitch_tracker.h"
+#undef max
+#undef min
+#include <boost/signals2/signal.hpp>
 
 /****************************************************************
  ** class tuner
@@ -42,7 +45,7 @@ private:
     enum { tuner_use = 0x01, livetuner_use = 0x02, switcher_use = 0x04, midi_use = 0x08 };
     void set_and_check(int use, bool on);
 public:
-    sigc::signal<void >& signal_freq_changed() { return pitch_tracker.new_freq; }
+    boost::signals2::signal<void ()>& signal_freq_changed() { return pitch_tracker.new_freq; }
    // Glib::Dispatcher& signal_freq_changed() { return pitch_tracker.new_freq; }
     static float get_freq(tuner& self) { return self.pitch_tracker.get_estimated_freq(); }
     static float get_note(tuner& self) { return self.pitch_tracker.get_estimated_note(); }
diff --git a/src/LV2/gxtuner.lv2/wscript b/src/LV2/gxtuner.lv2/wscript
index 22f9641d..2abffa26 100644
--- a/src/LV2/gxtuner.lv2/wscript
+++ b/src/LV2/gxtuner.lv2/wscript
@@ -12,7 +12,7 @@ def build(bld):
         source   = ['gxtuner.cpp'],
         includes = ['../faust','./', '../DSP'],
         cxxflags=['-fvisibility=hidden','-Wl,-z,noexecstack','-Wl,-z,relro,-z,now','-Wl,--exclude-libs,ALL'],
-        use = ['LV2CORE','SIGC','GX_RESAMPLER','FFTW3'],
+        use = ['LV2CORE','GX_RESAMPLER','FFTW3'],
         )
     bld.lv2_gui(
         lv2_base = lv2_base,
diff --git a/waftools/lv2.py b/waftools/lv2.py
index 335e81df..7397f6b7 100644
--- a/waftools/lv2.py
+++ b/waftools/lv2.py
@@ -101,7 +101,6 @@ def configure(conf):
     env.LV2GUI = opt.lv2_gui
     env.MODGUI = opt.mod_lv2
     env.NOSSE =  opt.disable_sse
-    conf.check_cfg(package='sigc++-2.0', args='--cflags --libs', uselib_store='SIGC', mandatory=1)
     conf.check_cfg(package='lv2', args=['--cflags','--libs','lv2 >= 1.2.0'], uselib_store='LV2CORE', mandatory=1)
     conf.define_with_env('GX_LV2_STYLE_DIR', os.path.join(env.GX_STYLE_DIR,'LV2'))
     if opt.lv2dir:
